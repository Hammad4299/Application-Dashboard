#shared runners/dind runner run in dind mode but they don't have docker layer caching. 
#   Good for non-docker build or builds that require to run nested docker containers with volume mounting via -v
#   must have service docker:dind if "docker" command is to be used
#runner with tag "docker-build-cache" run by sharing host docker.sock 
#   Provide docker layer caching
#   Can have trouble running nesting docker containers because if you want to use "docker" command you have two options
#     1. you must specify docker:stable as job image and then install any dependencies other than whats provided by docker:stable if required in it
#     2. specify some other dependencies image according to requirement and install docker client in it value
#   Cannot handle running docker containers with host volume mounts because containers are created as sibling of current container rather than childs and they share host volume instead of build container volume

stages:
  - build
  - deploy

build:docker:image:
  stage: build
  image: docker:stable
  retry: 1
  # tags:
  #   - docker-sock
  dependencies: []  #don't depend on explicit artifacts from any previous job
  services:
    - docker:dind
  script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY
    - rm -f webpack-path-base.config.js && cp devops/docker/resources/webpack-path-base.config.js webpack-path-base.config.js
    # - sh devops/docker/ci/remote-build-cache.sh
    - sh devops/docker/ci/build-images.sh
    - sh devops/docker/ci/push-images.sh
    # - sh devops/docker/ci/remote-push-build-cache.sh


deploy:kubernetes:
  stage: deploy
  retry: 1
  image: dtzar/helm-kubectl:3.1.2
  before_script:
    - apk add --update libintl && apk add --virtual build_deps gettext git && cp /usr/bin/envsubst /usr/local/bin/envsubst
  script:
    - sh devops/helm/scripts/set_k8s_context.sh
    - sh devops/helm/scripts/helm-deploy.sh